/**
 *@namespace EventDrivers
*/

/**
 * event initialization options.
 *@typedef {Object} InputEventInit
 *@property {boolean} [InputEventInit.bubbles=true] - boolean value indicating if event bubbles
 *@property {boolean} [InputEventInit.cancelable=false] - boolean value indicating if event is
 * cancelable
 *@property {WindowProxy} [InputEventInit.view=null] - identifies the window from which the event was generated.
 *@property {number} [InputEventInit.detail=0] - value is initialized to a number that is
 * application-specific.
 *@property {string} [InputEventInit.data=''] - data holds the value of the characters
 *@property {boolean} [InputEventInit.isComposing=false] - indicates if the event being
 * constructed occurs as part of a composition sequence
 * generated by an input method
*/
import {createDOMEvent, onInstall, host} from '../../Globals.js';
import UIDriver from './UIDriver.js';
import InputEventPollyfill from '../Pollyfills/InputEventPollyfill.js';

/**
 * input event driver class
 *@memberof EventDrivers
 *@see {@link https://www.w3.org/TR/uievents/#events-inputevents| W3C.org}
*/
export default class InputDriver extends UIDriver {
    /**
     * event types in the input event interface
     *@type {Array}
    */
    static get events() {
        return ['beforeinput', 'input'];
    }

    /**
     * event init keys
     *@type {Array}
    */
    static get eventInitKeys() {
        let keys = UIDriver.eventInitKeys;

        keys.push('data', 'isComposing');
        return keys;
    }

    /**
     * initializes the event according to the InputEvent interface eventInit requirement
     *@param {Object} storeIn - object in which to store initializations
     *@param {InputEventInit} getFrom - event initialization objects
     *@returns {Object}
    */
    static initEvent(storeIn, getFrom) {
        UIDriver.initEvent(storeIn, getFrom);

        storeIn.data = typeof getFrom.data !== 'undefined'? getFrom.data.toString() : '';
        storeIn.isComposing = getFrom.isComposing? true : false;

        return storeIn;
    }

    /**
     * creates a InputEvent object that can be dispatched to an event target
     *@param {string} type - the event type
     *@param {InputEventInit} eventInit - event initialization object
     *@returns {InputEvent}
    */
    static create(type, eventInit) {
        return createDOMEvent(
            'InputEvent', type, this.initEvent({}, eventInit), this.eventInitKeys
        );
    }

    /**
     *@param {Event} event - the dispatched event object
    */
    constructor(event) {
        super(event);
    }

    /**
     *@type {string}
    */
    get [Symbol.toStringTag]() {
        return 'InputDriver';
    }

    /**
     * data holds the value of the characters generated by an input method
     *@type {string}
    */
    get data() {
        return this.event.data;
    }

    /**
     * true if the input event occurs as part of a composition session, i.e., after a
     * compositionstart event and before the corresponding compositionend event
     *@type {boolean}
    */
    get isComposing() {
        return this.event.isComposing;
    }
}

onInstall(function() {
    InputEventPollyfill.install(host, InputDriver.initEvent);
});