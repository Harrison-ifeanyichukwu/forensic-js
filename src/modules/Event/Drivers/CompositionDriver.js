/**
 *@module CompositionDriver
 *@memberof EventDrivers
*/

/**
 * event initialization options.
 *@typedef {Object} CompositionEventInit
 *@private
 *@property {boolean} [bubbles=true] - boolean value indicating if event bubbles
 *@property {boolean} [cancelable=false] - boolean value indicating if event is
 * cancelable
 *@property {WindowProxy} [view=null] - identifies the window from which the event was generated.
 *@property {number} [detail=0] - value is initialized to a number that is
 * application-specific.
 *@property {string} [data] - data holds the value of the characters
 * generated by an input method
*/
import {createDOMEvent} from '../../Globals.js';
import UIDriver from './UIDriver.js';

/**
 * composition event driver class
 *@memberof EventDrivers.CompositionDriver#
 *@see {@link https://www.w3.org/TR/uievents/#events-compositionevents| W3C.org}
*/
export default class CompositionDriver extends UIDriver {
    /**
     * event types in the composition event interface
     *@memberof EventDrivers.CompositionDriver
     *@type {Array}
    */
    static get events() {
        return ['compositionend', 'compositionstart', 'compositionupdate'];
    }

    /**
     * event init keys
     *@memberof EventDrivers.CompositionDriver
     *@type {Array}
    */
    static get eventInitKeys() {
        let keys = UIDriver.eventInitKeys;

        keys.push('data');
        return keys;
    }

    /**
     * initializes the event according to the CompositionEvent interface eventInit requirement
     *@memberof EventDrivers.CompositionDriver
     *@param {Object} storeIn - object in which to store initializations
     *@param {CompositionEventInit} getFrom - event initialization objects
     *@returns {Object}
    */
    static initEvent(storeIn, getFrom) {
        UIDriver.initEvent(storeIn, getFrom);

        storeIn.data = typeof getFrom.data !== 'undefined'? getFrom.data.toString() : '';

        return storeIn;
    }

    /**
     * creates a CompositionEvent object that can be dispatched to an event target
     *@memberof EventDrivers.CompositionDriver
     *@param {string} type - the event type
     *@param {CompositionEventInit} eventInit - event initialization object
     *@returns {CompositionEvent}
    */
    static create(type, eventInit) {
        return createDOMEvent(
            'CompositionEvent', type, this.initEvent({}, eventInit), this.eventInitKeys
        );
    }

    /**
     *@param {Event} event - the dispatched event object
    */
    constructor(event) {
        super(event);
    }

    /**
     *@memberof EventDrivers.CompositionDriver#
     *@private
     *@type {string}
    */
    get [Symbol.toStringTag]() {
        return 'CompositionDriver';
    }

    /**
     * data holds the value of the characters generated by an input method
     *@memberof EventDrivers.CompositionDriver#
     *@type {string}
    */
    get data() {
        return this.event.data;
    }
}